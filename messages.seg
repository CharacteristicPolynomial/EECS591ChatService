// message system

enum HEADER {
    VIEW_CHANGE,
    VIEW_PROMISE,
    CLIENT_REQUEST,
    HEARTBEAT, 
    ACCEPT_IT,
    ACCEPTED,
    ACK,
    HEADERSIZE
};

/*

Message format:
    (HEARTBEAT, replicaID)
    ()

*/

class Message {
public:
    HEADER header;
    const char* content;
};


Message decode(const char* buf) {
    Message msg;
    msg.header = *(HEADER*)buf;
    msg.content = buf + sizeof(HEADER);
    return msg;
}

class Request {
public:
    Request() {
        holeQ = true;
        request = "EECS591";
    }
    Request(const char* buf) {
        // decode the buffer into a request
    }
    Request(sockaddr_in a, string r, int ri) {
        clientAddr = a;
        request = r;
        requestID = ri;
        holeQ = false;
    }
    void set_noop() {
        holeQ = false;
        // after calling this function, the request becomes a valid noop instead of a hole, it still has the default values though.
    }
    bool holeQ; // whenever holeQ=false, this request is not a hole.
    struct sockaddr_in clientAddr;
    string request; // in our case is just some string (message)
    int requestID; // given by the client
};